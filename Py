# Просит пользователя ввести сумму сбережений
savings = int(input())

# Сбережения растут через 1 год под 5% годовой процентной ставкой
balance = savings * 1.05 

# Преобразует баланс в строку и обновляет переменную
balance = str(balance)

# Объединяет 2 строки, чтобы получить сообщение
message = "Amount in 1 year: " + balance

# Отобразите сообщение
print(message)
=====================
# Преобразование значений в числа
wins = int(input())
ties = int(input())

# 1 победа = 3 очка
# 1 ничья = 1 очко
# Вычисление количества очков
score = wins * 3 + ties 

# Соединение двух строк для создания сообщения
message = "Score: " + str(score)


# Вывод сообщения
print(message )
=============================

# Программа принимает количество очков в качестве ввода
score = int(input())

# Добавьте операцию сравнения внутри скобок
print(score > 100 )
========≈=======================
# Принимаем количество шагов и минут в качестве ввода
steps = int(input())
active_minutes = int(input())

# Сохраняем результат операций в переменной
goal_achieved = steps > 10000 or active_minutes > 30

# Выводим результат на экран
print(goal_achieved )
==================================
# Баллы на физическом тесте
physic_test = int(input())

# Баллы на тесте по симуляции полета
flight_test = int(input())

# Комбинируем операции, чтобы получить конечный результат
combi_ball = physic_test > 90 and flight_test  > 85

# Выводим результат на экран
print(combi_ball )
======================================

for i in range(3):
    print('Fasten your seat belt')

===========≈===========================
# Принимаем число в качестве ввода
number = int(input())

# Используем цикл while для обратного отсчета
while number >=0:
    print(number)
    number = number - 1
=======================================

# Принять начальную популяцию клеток в качестве ввода
cells = int(input())

# Принять количество дней в качестве ввода
days = int(input())

# Вывести популяцию клеток в конце каждого дня
for day in range(1, days + 1):
    cells *= 2  # Популяция удваивается
    print(f"Day {day}: {cells}")
============================================
# Принять начальную популяцию клеток в качестве ввода
cells = int(input("Enter initial cell population: "))

# Принять количество дней в качестве ввода
days = int(input("Enter number of days: "))

# Вывести популяцию клеток в конце каждого дня
day = 1
while day <= days:
    cells *= 2  # Популяция удваивается
    print(f"Day {day}: {cells}")
    day += 1
==============================================
# Принять количество доступных мест в качестве ввода
spaces = int(input())

# Вывести сообщение, если есть свободные места
if spaces > 0:
    print("Available spaces")
else:

# Вывести другое сообщение, если мест нет

    print("Sorry, the parking lot is full")
================================================
# установленные игры
games = [
  'Soccer', 'Tic Tac Toe', 'Snake',
  'Puzzle', 'Rally']

# принимаем выбор игрока в виде числа
choice = int(input())

# вывод соответствующей игры
print (games[choice] )
===========================≈===≈==≈≈===≈====≈

# список с завтраками
breakfasts = [
  'Donuts', 'Waffles', 'Yogurt', 
  'Burrito', 'Toast']

# индекс элемента, который нужно заменить
item = int(input())

# заменить этот элемент на "Pancakes"
breakfasts[item] = "Pancakes"

# отобразить обновленный список
print (breakfasts )
=====================================≈=========

players = ["Alice", "Bob", "Charlie", "David", "Eve", "Frank"]

# Создайте 3 списка с 2 игроками в каждом
# Используйте срезы для создания списка для Group 1
g1 = players [0:2]

# Используйте срезы для создания списка для Group 2
g2 = players [2:4]

# Используйте срезы для создания списка для Group 3
g3 = players [4:6]

print("Group 1:\n"+str(g1))
# отобразить 1-ю группу


print("Group 2:\n"+str(g2))
# отобразить 2-ю группу


print("Group 3:\n"+str(g3))
# отобразить 3-ю группу
=≈=≈≈==================================≈=============



